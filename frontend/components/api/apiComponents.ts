/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type UpdateApiUpdatePostError = Fetcher.ErrorWrapper<undefined>;

export type UpdateApiUpdatePostVariables = ApiContext["fetcherOptions"];

export const fetchUpdateApiUpdatePost = (
  variables: UpdateApiUpdatePostVariables,
  signal?: AbortSignal
) =>
  apiFetch<void, UpdateApiUpdatePostError, undefined, {}, {}, {}>({
    url: "/api/update",
    method: "post",
    ...variables,
    signal,
  });

export const useUpdateApiUpdatePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      UpdateApiUpdatePostError,
      UpdateApiUpdatePostVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    void,
    UpdateApiUpdatePostError,
    UpdateApiUpdatePostVariables
  >(
    (variables: UpdateApiUpdatePostVariables) =>
      fetchUpdateApiUpdatePost({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetPositionedGraphApiGraphGetQueryParams = {
  pipeline_name?: string;
};

export type GetPositionedGraphApiGraphGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type GetPositionedGraphApiGraphGetVariables = {
  queryParams?: GetPositionedGraphApiGraphGetQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPositionedGraphApiGraphGet = (
  variables: GetPositionedGraphApiGraphGetVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.Graph,
    GetPositionedGraphApiGraphGetError,
    undefined,
    {},
    GetPositionedGraphApiGraphGetQueryParams,
    {}
  >({ url: "/api/graph", method: "get", ...variables, signal });

export const useGetPositionedGraphApiGraphGet = <TData = Schemas.Graph>(
  variables: GetPositionedGraphApiGraphGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Graph,
      GetPositionedGraphApiGraphGetError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.Graph,
    GetPositionedGraphApiGraphGetError,
    TData
  >(
    queryKeyFn({
      path: "/api/graph",
      operationId: "getPositionedGraphApiGraphGet",
      variables,
    }),
    ({ signal }) =>
      fetchGetPositionedGraphApiGraphGet(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetPipelinesApiPipelinesGetError = Fetcher.ErrorWrapper<undefined>;

export type GetPipelinesApiPipelinesGetVariables = ApiContext["fetcherOptions"];

export const fetchGetPipelinesApiPipelinesGet = (
  variables: GetPipelinesApiPipelinesGetVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.Pipelines,
    GetPipelinesApiPipelinesGetError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/pipelines", method: "get", ...variables, signal });

export const useGetPipelinesApiPipelinesGet = <TData = Schemas.Pipelines>(
  variables: GetPipelinesApiPipelinesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Pipelines,
      GetPipelinesApiPipelinesGetError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.Pipelines,
    GetPipelinesApiPipelinesGetError,
    TData
  >(
    queryKeyFn({
      path: "/api/pipelines",
      operationId: "getPipelinesApiPipelinesGet",
      variables,
    }),
    ({ signal }) =>
      fetchGetPipelinesApiPipelinesGet(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetNodeInfoApiNodeNodeIdGetPathParams = {
  nodeId: string;
};

export type GetNodeInfoApiNodeNodeIdGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type GetNodeInfoApiNodeNodeIdGetVariables = {
  pathParams: GetNodeInfoApiNodeNodeIdGetPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetNodeInfoApiNodeNodeIdGet = (
  variables: GetNodeInfoApiNodeNodeIdGetVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.NodeInformation,
    GetNodeInfoApiNodeNodeIdGetError,
    undefined,
    {},
    {},
    GetNodeInfoApiNodeNodeIdGetPathParams
  >({ url: "/api/node/{nodeId}", method: "get", ...variables, signal });

export const useGetNodeInfoApiNodeNodeIdGet = <TData = Schemas.NodeInformation>(
  variables: GetNodeInfoApiNodeNodeIdGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.NodeInformation,
      GetNodeInfoApiNodeNodeIdGetError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.NodeInformation,
    GetNodeInfoApiNodeNodeIdGetError,
    TData
  >(
    queryKeyFn({
      path: "/api/node/{node_id}",
      operationId: "getNodeInfoApiNodeNodeIdGet",
      variables,
    }),
    ({ signal }) =>
      fetchGetNodeInfoApiNodeNodeIdGet(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetNodeSchemaVersionsApiNodeNodeIdSchemaGetPathParams = {
  nodeId: string;
};

export type GetNodeSchemaVersionsApiNodeNodeIdSchemaGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetNodeSchemaVersionsApiNodeNodeIdSchemaGetResponse = number[];

export type GetNodeSchemaVersionsApiNodeNodeIdSchemaGetVariables = {
  pathParams: GetNodeSchemaVersionsApiNodeNodeIdSchemaGetPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetNodeSchemaVersionsApiNodeNodeIdSchemaGet = (
  variables: GetNodeSchemaVersionsApiNodeNodeIdSchemaGetVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetNodeSchemaVersionsApiNodeNodeIdSchemaGetResponse,
    GetNodeSchemaVersionsApiNodeNodeIdSchemaGetError,
    undefined,
    {},
    {},
    GetNodeSchemaVersionsApiNodeNodeIdSchemaGetPathParams
  >({ url: "/api/node/{nodeId}/schema", method: "get", ...variables, signal });

export const useGetNodeSchemaVersionsApiNodeNodeIdSchemaGet = <
  TData = GetNodeSchemaVersionsApiNodeNodeIdSchemaGetResponse
>(
  variables: GetNodeSchemaVersionsApiNodeNodeIdSchemaGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetNodeSchemaVersionsApiNodeNodeIdSchemaGetResponse,
      GetNodeSchemaVersionsApiNodeNodeIdSchemaGetError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetNodeSchemaVersionsApiNodeNodeIdSchemaGetResponse,
    GetNodeSchemaVersionsApiNodeNodeIdSchemaGetError,
    TData
  >(
    queryKeyFn({
      path: "/api/node/{node_id}/schema",
      operationId: "getNodeSchemaVersionsApiNodeNodeIdSchemaGet",
      variables,
    }),
    ({ signal }) =>
      fetchGetNodeSchemaVersionsApiNodeNodeIdSchemaGet(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetNodeSchemaApiNodeNodeIdSchemaVersionGetPathParams = {
  nodeId: string;
  version: number;
};

export type GetNodeSchemaApiNodeNodeIdSchemaVersionGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetNodeSchemaApiNodeNodeIdSchemaVersionGetVariables = {
  pathParams: GetNodeSchemaApiNodeNodeIdSchemaVersionGetPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetNodeSchemaApiNodeNodeIdSchemaVersionGet = (
  variables: GetNodeSchemaApiNodeNodeIdSchemaVersionGetVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Record<string, any>,
    GetNodeSchemaApiNodeNodeIdSchemaVersionGetError,
    undefined,
    {},
    {},
    GetNodeSchemaApiNodeNodeIdSchemaVersionGetPathParams
  >({
    url: "/api/node/{nodeId}/schema/{version}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetNodeSchemaApiNodeNodeIdSchemaVersionGet = <
  TData = Record<string, any>
>(
  variables: GetNodeSchemaApiNodeNodeIdSchemaVersionGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Record<string, any>,
      GetNodeSchemaApiNodeNodeIdSchemaVersionGetError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Record<string, any>,
    GetNodeSchemaApiNodeNodeIdSchemaVersionGetError,
    TData
  >(
    queryKeyFn({
      path: "/api/node/{node_id}/schema/{version}",
      operationId: "getNodeSchemaApiNodeNodeIdSchemaVersionGet",
      variables,
    }),
    ({ signal }) =>
      fetchGetNodeSchemaApiNodeNodeIdSchemaVersionGet(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetLinkingApiNodeLinkingNodeIdGetPathParams = {
  nodeId: string;
};

export type GetLinkingApiNodeLinkingNodeIdGetQueryParams = {
  link_type: string;
};

export type GetLinkingApiNodeLinkingNodeIdGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type GetLinkingApiNodeLinkingNodeIdGetVariables = {
  pathParams: GetLinkingApiNodeLinkingNodeIdGetPathParams;
  queryParams: GetLinkingApiNodeLinkingNodeIdGetQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetLinkingApiNodeLinkingNodeIdGet = (
  variables: GetLinkingApiNodeLinkingNodeIdGetVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    string,
    GetLinkingApiNodeLinkingNodeIdGetError,
    undefined,
    {},
    GetLinkingApiNodeLinkingNodeIdGetQueryParams,
    GetLinkingApiNodeLinkingNodeIdGetPathParams
  >({ url: "/api/node/linking/{nodeId}", method: "get", ...variables, signal });

export const useGetLinkingApiNodeLinkingNodeIdGet = <TData = string>(
  variables: GetLinkingApiNodeLinkingNodeIdGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      string,
      GetLinkingApiNodeLinkingNodeIdGetError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    string,
    GetLinkingApiNodeLinkingNodeIdGetError,
    TData
  >(
    queryKeyFn({
      path: "/api/node/linking/{node_id}",
      operationId: "getLinkingApiNodeLinkingNodeIdGet",
      variables,
    }),
    ({ signal }) =>
      fetchGetLinkingApiNodeLinkingNodeIdGet(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetMetricsApiMetricsGetError = Fetcher.ErrorWrapper<undefined>;

export type GetMetricsApiMetricsGetResponse = Schemas.Metric[];

export type GetMetricsApiMetricsGetVariables = ApiContext["fetcherOptions"];

export const fetchGetMetricsApiMetricsGet = (
  variables: GetMetricsApiMetricsGetVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetMetricsApiMetricsGetResponse,
    GetMetricsApiMetricsGetError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/metrics", method: "get", ...variables, signal });

export const useGetMetricsApiMetricsGet = <
  TData = GetMetricsApiMetricsGetResponse
>(
  variables: GetMetricsApiMetricsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetMetricsApiMetricsGetResponse,
      GetMetricsApiMetricsGetError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetMetricsApiMetricsGetResponse,
    GetMetricsApiMetricsGetError,
    TData
  >(
    queryKeyFn({
      path: "/api/metrics",
      operationId: "getMetricsApiMetricsGet",
      variables,
    }),
    ({ signal }) =>
      fetchGetMetricsApiMetricsGet({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation =
  | {
      path: "/api/graph";
      operationId: "getPositionedGraphApiGraphGet";
      variables: GetPositionedGraphApiGraphGetVariables;
    }
  | {
      path: "/api/pipelines";
      operationId: "getPipelinesApiPipelinesGet";
      variables: GetPipelinesApiPipelinesGetVariables;
    }
  | {
      path: "/api/node/{node_id}";
      operationId: "getNodeInfoApiNodeNodeIdGet";
      variables: GetNodeInfoApiNodeNodeIdGetVariables;
    }
  | {
      path: "/api/node/{node_id}/schema";
      operationId: "getNodeSchemaVersionsApiNodeNodeIdSchemaGet";
      variables: GetNodeSchemaVersionsApiNodeNodeIdSchemaGetVariables;
    }
  | {
      path: "/api/node/{node_id}/schema/{version}";
      operationId: "getNodeSchemaApiNodeNodeIdSchemaVersionGet";
      variables: GetNodeSchemaApiNodeNodeIdSchemaVersionGetVariables;
    }
  | {
      path: "/api/node/linking/{node_id}";
      operationId: "getLinkingApiNodeLinkingNodeIdGet";
      variables: GetLinkingApiNodeLinkingNodeIdGetVariables;
    }
  | {
      path: "/api/metrics";
      operationId: "getMetricsApiMetricsGet";
      variables: GetMetricsApiMetricsGetVariables;
    };
