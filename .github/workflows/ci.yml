name: CI

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      releaseType:
        description: "The type of the release."
        default: "patch"
        required: false

jobs:
  backend:
    name: Backend
    runs-on: ubuntu-latest
    env:
      working-directory: ./backend
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9"]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install packages
        run: sudo apt-get -y install python3-dev graphviz libgraphviz-dev pkg-config python3-wheel

      - name: Run poetry image
        uses: abatilo/actions-poetry@v2.1.4
        with:
          poetry-version: 1.1.12

      - name: Set poetry virtualenv
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.working-directory }}/.venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('backend/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s python -m poetry run pip --version || rm -rf .venv
        working-directory: ${{ env.working-directory }}

      - name: Install dependencies
        run: poetry install --no-interaction
        working-directory: ${{ env.working-directory }}

      - name: Lint (flake8)
        run: poetry run pre-commit run flake8 --all-files --show-diff-on-failure
        working-directory: ${{ env.working-directory }}

      - name: Order of imports (isort)
        run: poetry run pre-commit run isort --all-files --show-diff-on-failure
        working-directory: ${{ env.working-directory }}

      - name: Formatting (black)
        run: poetry run pre-commit run black --all-files --show-diff-on-failure
        working-directory: ${{ env.working-directory }}

      - name: Typing (mypy)
        run: poetry run pre-commit run mypy --all-files
        working-directory: ${{ env.working-directory }}

      - name: Test
        run: poetry run pytest tests
        working-directory: ${{ env.working-directory }}

  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    env:
      working-directory: ./frontend
    strategy:
      fail-fast: false
      matrix:
        node-version: ["16"]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: ${{ env.working-directory }}/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.working-directory }}

      - name: Lint
        run: npm run lint
        working-directory: ${{ env.working-directory }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install pre-commit
        run: python -m pip install pre-commit

      - name: Formatting (prettier)
        run: pre-commit run prettier --all-files
        working-directory: ${{ env.working-directory }}

      - name: Fetchers
        run: pre-commit run generate-fetchers --all-files
        working-directory: ${{ env.working-directory }}

      - name: Run Tests
        run: npm run test:ci
        working-directory: ${{ env.working-directory }}

  docker:
    name: Docker
    needs: [backend, frontend]
    if: success()
    runs-on: ubuntu-latest
    env:
      image: bakdata/streams-explorer
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.image }}
          tags: |
            event=pr,type=sha
            event=tag,type=semver,pattern=v{{version}}

      - name: Login to DockerHub
        if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  bump-version:
    name: Bump version
    needs: [backend, frontend, docker]
    if: success() && github.ref == 'refs/heads/main' && github.event.inputs.releaseType != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          persist-credentials: false

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          repository: "bakdata/ci-templates"
          path: "ci-templates"

      - name: Bump version
        uses: ./ci-templates/bump-version
        with:
          githubToken: "${{ secrets.GH_TOKEN }}"
          githubUsername: "${{ secrets.GH_USERNAME }}"
          githubEmail: "${{ secrets.GH_EMAIL }}"
          releaseType: "${{ github.event.inputs.releaseType }}"

  pypi:
    name: Publish PyPI
    if: success() && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    env:
      BACKEND_DIR: ./backend
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Copy Readme
        run: |
          cp README.md $BACKEND_DIR/
          git add $BACKEND_DIR/README.md
          sed -E -i.bak 's/\.\.\/README/README/' $BACKEND_DIR/pyproject.toml

      - name: Install packages
        run: sudo apt-get -y install python3-dev graphviz libgraphviz-dev pkg-config python3-wheel

      - name: Run poetry image
        uses: abatilo/actions-poetry@v2.1.4
        with:
          poetry-version: 1.1.12

      - name: Install dependencies
        run: poetry install --no-dev --no-interaction
        working-directory: ${{ env.BACKEND_DIR }}

      - name: Build library
        run: poetry build
        working-directory: ${{ env.BACKEND_DIR }}

      - name: Publish to PyPI
        run: |
          poetry publish --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
        shell: bash
        working-directory: ${{ env.BACKEND_DIR }}
