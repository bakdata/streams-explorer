trigger:
  branches:
    include:
      - main
  tags:
    include:
      - "*"

pr:
  branches:
    include:
      - main

resources:
  - repo: self

variables:
  vmImage: "ubuntu-20.04"
  imageRepository: "$(Build.repository.name)"
  dockerfilePath: "$(Build.SourcesDirectory)/Dockerfile"
  dockerRegistryServiceConnection: "docker_hub"
  dockerDefaultImageTag: "$(Build.BuildId)-$(Build.SourceVersion)"
  isMain: $[eq(variables['Build.SourceBranchName'], 'main')]
  isTag: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]

stages:
  - stage: Testing
    jobs:
      - job: Backend
        pool:
          vmImage: $(vmImage)
        strategy:
          matrix:
            Python38:
              python.version: "3.8"
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "$(python.version)"

          - script: |
              cd backend
              sudo apt-get -y install python3-dev graphviz libgraphviz-dev pkg-config python3-wheel
              python -m pip install -r requirements.txt
            displayName: "Install dependencies"

          - script: |
              cd backend
              python -m flake8 --config .flake8 .
            displayName: "Lint"

          - script: |
              cd backend
              python -m pytest tests
            displayName: "Run Tests"

      - job: Frontend
        pool:
          vmImage: $(vmImage)
        strategy:
          matrix:
            node_14_x:
              node.version: "14.x"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: $(node.version)

          - script: |
              cd frontend
              npm install
            displayName: "Install dependencies"

          - script: |
              cd frontend
              npm run lint
            displayName: "Lint"

          - script: |
              cd frontend
              CI=true npm test
            displayName: "Run Tests"

  - stage: Publish
    condition: succeeded()
    pool:
      vmImage: $(vmImage)
    jobs:
      - job: Build
        steps:
          - task: Docker@2
            condition: and(eq(variables['release.version'], ''), eq(variables.isTag, false))
            displayName: "Build & Push image commit"
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              Dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(dockerDefaultImageTag)

          - task: Docker@2
            condition: eq(variables.isTag, true)
            displayName: "Build & Push image release"
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              Dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(Build.SourceBranchName)  # name of git release tag
                latest

      - job: Release
        dependsOn: Build
        condition: and(succeeded(), eq(variables.isMain, true), ne(variables['release.version'], ''))
        steps:
          - checkout: self
            persistCredentials: true

          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.8"

          - script: pip install -U pip
            displayName: "Upgrade pip"

          - script: pip install -U bump2version
            displayName: "Install bump2version"

          - script: |
              git config user.email "31185348+bakdata-bot@users.noreply.github.com"
              git config user.name "bakdata-bot"
              git fetch
              git checkout main
            displayName: "Configure Git"

          - script: bump2version $(release.version)
            displayName: "Bump version release"

          - script: git push --follow-tags origin $(Build.SourceBranchName)
            displayName: "Push Tag to GitHub"
