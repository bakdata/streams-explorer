trigger:
  branches:
    include:
      - main
  tags:
    include:
      - "*"

pr:
  branches:
    include:
      - main

resources:
  - repo: self

variables:
  - group: pypi
  - name: vmImage
    value: ubuntu-20.04
  - name: pythonVersion
    value: "3.8"
  - name: imageRepository
    value: $(Build.repository.name)
  - name: dockerfilePath
    value: $(Build.SourcesDirectory)/Dockerfile
  - name: backendPath
    value: $(Build.SourcesDirectory)/backend
  - name: frontendPath
    value: $(Build.SourcesDirectory)/frontend
  - name: dockerRegistryServiceConnection
    value: docker_hub
  - name: dockerDefaultImageTag
    value: $(Build.BuildId)-$(Build.SourceVersion)
  - name: isMain
    value: $[eq(variables['Build.SourceBranchName'], 'main')]
  - name: isTag
    value: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]

stages:
  - stage: Testing
    jobs:
      - job: Backend
        pool:
          vmImage: $(vmImage)
        strategy:
          matrix:
            Python38:
              python.version: "3.8"
            Python39:
              python.version: "3.9"
        variables:
          PIP_CACHE_DIR: $(Pipeline.Workspace)/.pip
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(python.version)

          - task: Cache@2
            inputs:
              key: 'python | "$(Agent.OS)" | $(backendPath)/poetry.lock'
              restoreKeys: |
                python | "$(Agent.OS)"
                python
              path: $(PIP_CACHE_DIR)
            displayName: "Cache pip packages"

          - script: |
              sudo apt-get -y install python3-dev graphviz libgraphviz-dev pkg-config python3-wheel
              python -m pip install poetry
              poetry install --no-interaction
            displayName: "Install dependencies"
            workingDirectory: $(backendPath)

          - script: poetry run pre-commit run flake8 --all-files --show-diff-on-failure
            displayName: "Lint (flake8)"
            workingDirectory: $(backendPath)

          - script: poetry run pre-commit run isort --all-files
            displayName: "Order of imports (isort)"
            workingDirectory: $(backendPath)

          - script: poetry run pre-commit run black --all-files --show-diff-on-failure
            displayName: "Formatting (black)"
            workingDirectory: $(backendPath)

          - script: poetry run pre-commit run mypy --all-files
            displayName: "Typing (mypy)"
            workingDirectory: $(backendPath)

          - script: poetry run pytest tests
            displayName: "Run Tests"
            workingDirectory: $(backendPath)

      - job: Frontend
        pool:
          vmImage: $(vmImage)
        strategy:
          matrix:
            Node16:
              node.version: "16.x"
        variables:
          PIP_CACHE_DIR: $(Pipeline.Workspace)/.pip
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: $(node.version)

          - script: npm ci
            displayName: "Install dependencies"
            workingDirectory: $(frontendPath)

          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(pythonVersion)

          - script: python -m pip install pre-commit
            displayName: "Install pre-commit"

          - script: npm run lint
            displayName: "Lint"
            workingDirectory: $(frontendPath)

          - script: curl -fsSL https://dprint.dev/install.sh | sh
            displayName: "Install dprint"

          - script: pre-commit run dprint --all-files
            displayName: "Formatting (dprint)"

          - script: pre-commit run generate-fetchers --all-files
            displayName: "Fetchers"

          - script: npm run test:ci
            displayName: "Run Tests"
            workingDirectory: $(frontendPath)

  - stage: Publish
    condition: succeeded()
    pool:
      vmImage: $(vmImage)
    jobs:
      - job: Docker
        steps:
          - script: docker pull $(imageRepository):latest
            displayName: "Pull previous image for build caching"
            continueOnError: true

          - task: Docker@2
            condition: and(eq(variables['release.version'], ''), eq(variables.isTag, false))
            displayName: "Build image commit"
            inputs:
              command: build
              repository: $(imageRepository)
              Dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              arguments: "--cache-from=$(imageRepository):latest"
              tags: |
                $(dockerDefaultImageTag)

          - task: Docker@2
            condition: and(eq(variables['release.version'], ''), eq(variables.isTag, false))
            displayName: "Push image commit"
            inputs:
              command: push
              repository: $(imageRepository)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(dockerDefaultImageTag)

          - task: Docker@2
            condition: eq(variables.isTag, true)
            displayName: "Build image release"
            inputs:
              command: build
              repository: $(imageRepository)
              Dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              arguments: "--cache-from=$(imageRepository):latest"
              tags: |
                $(Build.SourceBranchName)
                latest

          - task: Docker@2
            condition: eq(variables.isTag, true)
            displayName: "Push image release"
            inputs:
              command: push
              repository: $(imageRepository)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(Build.SourceBranchName)
                latest

      - job: Release
        dependsOn: Docker
        condition: and(succeeded(), eq(variables.isMain, true), ne(variables['release.version'], ''))
        steps:
          - checkout: self
            persistCredentials: true

          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(pythonVersion)

          - script: pip install -U pip
            displayName: "Upgrade pip"

          - script: pip install -U bump2version
            displayName: "Install bump2version"

          - script: |
              git config user.email "31185348+bakdata-bot@users.noreply.github.com"
              git config user.name "bakdata-bot"
              git fetch
              git checkout main
            displayName: "Configure Git"

          - script: bump2version $(release.version)
            displayName: "Bump version release"

          - script: git push --follow-tags origin $(Build.SourceBranchName)
            displayName: "Push Tag to GitHub"

      - job: PyPI
        condition: eq(variables.isTag, true)
        steps:
          - checkout: self
            persistCredentials: true

          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(pythonVersion)

          - script: |
              cp README.md $(backendPath)/
              git add $(backendPath)/README.md
              sed -E -i.bak 's/\.\.\/README/README/' $(backendPath)/pyproject.toml
            displayName: "Copy Readme"

          - script: |
              sudo apt-get -y install python3-dev graphviz libgraphviz-dev pkg-config python3-wheel
            displayName: "Install dependencies"
            workingDirectory: $(backendPath)

          - script: pip install poetry
            displayName: "Install poetry"

          - script: poetry install --no-dev --no-interaction
            displayName: "Install package dependencies"
            workingDirectory: $(backendPath)

          - script: poetry build
            displayName: "Build library"
            workingDirectory: $(backendPath)

          - script: poetry publish
            displayName: "Publish to PyPI"
            workingDirectory: $(backendPath)
            env:
              POETRY_HTTP_BASIC_PYPI_USERNAME: $(pypi.username)
              POETRY_HTTP_BASIC_PYPI_PASSWORD: $(pypi.password)
